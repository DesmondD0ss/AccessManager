import * as cron from 'node-cron';
import { quotaService } from './quotaService.js';
import { logger } from '../utils/logger.js';
import { appConfig } from '../config/config.js';

/**
 * Service de t√¢ches programm√©es pour GAIS
 */
export class CronService {
  private static instance: CronService;
  private tasks: Map<string, cron.ScheduledTask> = new Map();

  public static getInstance(): CronService {
    if (!CronService.instance) {
      CronService.instance = new CronService();
    }
    return CronService.instance;
  }

  /**
   * Initialiser tous les cron jobs
   */
  public initialize(): void {
    if (!appConfig.isProduction && !appConfig.isDevelopment) return;

    logger.info('üïê Initialisation des t√¢ches programm√©es...');

    this.setupQuotaResetJobs();
    this.setupMaintenanceJobs();
    this.setupHealthCheckJobs();

    logger.info(`‚úÖ ${this.tasks.size} t√¢ches programm√©es initialis√©es`);
  }

  /**
   * Configurer les r√©initialisations de quotas
   */
  private setupQuotaResetJobs(): void {
    // R√©initialisation quotidienne √† minuit
    const dailyTask = cron.schedule('0 0 * * *', async () => {
      try {
        logger.info('üîÑ D√©but de la r√©initialisation quotidienne des quotas...');
        const result = await quotaService.resetQuotas('daily');
        logger.info(`‚úÖ Quotas quotidiens r√©initialis√©s pour ${result.resetCount} utilisateurs`);
      } catch (error) {
        logger.error('‚ùå Erreur lors de la r√©initialisation quotidienne:', error);
      }
    }, {
      timezone: 'Europe/Paris'
    });

    // R√©initialisation hebdomadaire le lundi √† 00:01
    const weeklyTask = cron.schedule('1 0 * * 1', async () => {
      try {
        logger.info('üîÑ D√©but de la r√©initialisation hebdomadaire des quotas...');
        const result = await quotaService.resetQuotas('weekly');
        logger.info(`‚úÖ Quotas hebdomadaires r√©initialis√©s pour ${result.resetCount} utilisateurs`);
      } catch (error) {
        logger.error('‚ùå Erreur lors de la r√©initialisation hebdomadaire:', error);
      }
    }, {
      timezone: 'Europe/Paris'
    });

    // R√©initialisation mensuelle le 1er √† 00:02
    const monthlyTask = cron.schedule('2 0 1 * *', async () => {
      try {
        logger.info('üîÑ D√©but de la r√©initialisation mensuelle des quotas...');
        const result = await quotaService.resetQuotas('monthly');
        logger.info(`‚úÖ Quotas mensuels r√©initialis√©s pour ${result.resetCount} utilisateurs`);
      } catch (error) {
        logger.error('‚ùå Erreur lors de la r√©initialisation mensuelle:', error);
      }
    }, {
      timezone: 'Europe/Paris'
    });

    this.tasks.set('quota-daily', dailyTask);
    this.tasks.set('quota-weekly', weeklyTask);
    this.tasks.set('quota-monthly', monthlyTask);
  }

  /**
   * Configurer les t√¢ches de maintenance
   */
  private setupMaintenanceJobs(): void {
    // Nettoyage des sessions expir√©es toutes les heures
    const cleanupTask = cron.schedule('0 * * * *', async () => {
      try {
        logger.debug('üßπ Nettoyage des sessions expir√©es...');
        await this.cleanupExpiredSessions();
      } catch (error) {
        logger.error('‚ùå Erreur lors du nettoyage:', error);
      }
    }, {
      timezone: 'Europe/Paris'
    });

    // Nettoyage des tokens expir√©s toutes les 6 heures
    const tokenCleanupTask = cron.schedule('0 */6 * * *', async () => {
      try {
        logger.debug('üßπ Nettoyage des tokens expir√©s...');
        await this.cleanupExpiredTokens();
      } catch (error) {
        logger.error('‚ùå Erreur lors du nettoyage des tokens:', error);
      }
    }, {
      timezone: 'Europe/Paris'
    });

    // Rotation des logs quotidienne √† 3h du matin
    const logRotationTask = cron.schedule('0 3 * * *', async () => {
      try {
        logger.info('üîÑ Rotation des logs...');
        await this.rotateLogsIfNeeded();
      } catch (error) {
        logger.error('‚ùå Erreur lors de la rotation des logs:', error);
      }
    }, {
      timezone: 'Europe/Paris'
    });

    this.tasks.set('cleanup-sessions', cleanupTask);
    this.tasks.set('cleanup-tokens', tokenCleanupTask);
    this.tasks.set('log-rotation', logRotationTask);
  }

  /**
   * Configurer les v√©rifications de sant√©
   */
  private setupHealthCheckJobs(): void {
    // V√©rification de sant√© interne toutes les 5 minutes
    const healthTask = cron.schedule('*/5 * * * *', async () => {
      try {
        await this.performHealthCheck();
      } catch (error) {
        logger.error('‚ùå Erreur lors de la v√©rification de sant√©:', error);
      }
    }, {
      timezone: 'Europe/Paris'
    });

    // Statistiques de performance toutes les 15 minutes
    const statsTask = cron.schedule('*/15 * * * *', async () => {
      try {
        await this.logPerformanceStats();
      } catch (error) {
        logger.error('‚ùå Erreur lors du logging des statistiques:', error);
      }
    }, {
      timezone: 'Europe/Paris'
    });

    this.tasks.set('health-check', healthTask);
    this.tasks.set('performance-stats', statsTask);
  }

  /**
   * Nettoyer les sessions expir√©es
   */
  private async cleanupExpiredSessions(): Promise<void> {
    const { PrismaClient } = await import('@prisma/client');
    const prisma = new PrismaClient();

    try {
      // Sessions inactives depuis plus de 24h
      const expiredThreshold = new Date(Date.now() - 24 * 60 * 60 * 1000);

      const result = await prisma.accessSession.updateMany({
        where: {
          status: 'ACTIVE',
          lastActiveAt: { lt: expiredThreshold }
        },
        data: {
          status: 'EXPIRED',
          endedAt: new Date()
        }
      });

      if (result.count > 0) {
        logger.info(`üßπ ${result.count} sessions expir√©es nettoy√©es`);
      }

    } catch (error) {
      logger.error('Erreur lors du nettoyage des sessions:', error);
    } finally {
      await prisma.$disconnect();
    }
  }

  /**
   * Nettoyer les tokens expir√©s
   */
  private async cleanupExpiredTokens(): Promise<void> {
    const { PrismaClient } = await import('@prisma/client');
    const prisma = new PrismaClient();

    try {
      const result = await prisma.refreshToken.deleteMany({
        where: {
          OR: [
            { expiresAt: { lt: new Date() } },
            { isRevoked: true, createdAt: { lt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) } }
          ]
        }
      });

      if (result.count > 0) {
        logger.info(`üßπ ${result.count} tokens expir√©s supprim√©s`);
      }

    } catch (error) {
      logger.error('Erreur lors du nettoyage des tokens:', error);
    } finally {
      await prisma.$disconnect();
    }
  }

  /**
   * Effectuer une v√©rification de sant√© interne
   */
  private async performHealthCheck(): Promise<void> {
    const { PrismaClient } = await import('@prisma/client');
    const prisma = new PrismaClient();

    try {
      // Test de connexion DB
      await prisma.$queryRaw`SELECT 1`;

      // V√©rifier l'usage m√©moire
      const memUsage = process.memoryUsage();
      const memUsagePercent = (memUsage.heapUsed / memUsage.heapTotal) * 100;

      if (memUsagePercent > 90) {
        logger.warn(`‚ö†Ô∏è Usage m√©moire √©lev√©: ${memUsagePercent.toFixed(2)}%`);
      }

      // V√©rifier les erreurs r√©centes
      // Cette logique d√©pendrait d'un syst√®me de collecte d'erreurs

    } catch (error) {
      logger.error('V√©rification de sant√© √©chou√©e:', error);
    } finally {
      await prisma.$disconnect();
    }
  }

  /**
   * Logger les statistiques de performance
   */
  private async logPerformanceStats(): Promise<void> {
    try {
      const memUsage = process.memoryUsage();
      const cpuUsage = process.cpuUsage();

      logger.debug('üìä Statistiques de performance', {
        memory: {
          heapUsed: Math.round(memUsage.heapUsed / 1024 / 1024),
          heapTotal: Math.round(memUsage.heapTotal / 1024 / 1024),
          external: Math.round(memUsage.external / 1024 / 1024),
          rss: Math.round(memUsage.rss / 1024 / 1024)
        },
        cpu: {
          user: cpuUsage.user,
          system: cpuUsage.system
        },
        uptime: Math.round(process.uptime()),
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error('Erreur lors du logging des stats:', error);
    }
  }

  /**
   * Rotation des logs si n√©cessaire
   */
  private async rotateLogsIfNeeded(): Promise<void> {
    try {
      // Cette impl√©mentation d√©pend du syst√®me de logging utilis√©
      // Winston g√®re g√©n√©ralement la rotation automatiquement
      logger.info('üîÑ V√©rification de la rotation des logs termin√©e');
    } catch (error) {
      logger.error('Erreur lors de la rotation des logs:', error);
    }
  }

  /**
   * D√©marrer une t√¢che sp√©cifique
   */
  public startTask(taskName: string): boolean {
    const task = this.tasks.get(taskName);
    if (task) {
      task.start();
      logger.info(`‚ñ∂Ô∏è T√¢che "${taskName}" d√©marr√©e`);
      return true;
    }
    return false;
  }

  /**
   * Arr√™ter une t√¢che sp√©cifique
   */
  public stopTask(taskName: string): boolean {
    const task = this.tasks.get(taskName);
    if (task) {
      task.stop();
      logger.info(`‚èπÔ∏è T√¢che "${taskName}" arr√™t√©e`);
      return true;
    }
    return false;
  }

  /**
   * Obtenir le statut de toutes les t√¢ches
   */
  public getTasksStatus(): { [key: string]: boolean } {
    const status: { [key: string]: boolean } = {};
    
    this.tasks.forEach((_task, name) => {
      // Les t√¢ches cron de node-cron n'ont plus de propri√©t√© running
      // On consid√®re qu'elles sont actives si elles existent dans la Map
      status[name] = true;
    });

    return status;
  }

  /**
   * Arr√™ter tous les cron jobs
   */
  public shutdown(): void {
    logger.info('‚èπÔ∏è Arr√™t des t√¢ches programm√©es...');
    
    this.tasks.forEach((task, name) => {
      task.stop();
      logger.debug(`T√¢che "${name}" arr√™t√©e`);
    });

    this.tasks.clear();
    logger.info('‚úÖ Toutes les t√¢ches programm√©es arr√™t√©es');
  }

  /**
   * Ex√©cuter manuellement une r√©initialisation de quotas (pour tests)
   */
  public async manualQuotaReset(type: 'daily' | 'weekly' | 'monthly'): Promise<{ resetCount: number }> {
    logger.info(`üîß R√©initialisation manuelle des quotas ${type}...`);
    const result = await quotaService.resetQuotas(type);
    logger.info(`‚úÖ R√©initialisation manuelle termin√©e: ${result.resetCount} utilisateurs`);
    return result;
  }
}

// Export de l'instance singleton
export const cronService = CronService.getInstance();
